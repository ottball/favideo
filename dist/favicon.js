!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t);var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=this.getExistingFavicon();this.node=n||this.create()}var t,n,o;return t=e,(n=[{key:"getExistingFavicon",value:function(){return document.querySelector('link[rel="shortcut icon"]')}},{key:"create",value:function(){var e=document.createElement("link");return e.type="image/x-icon",e.rel="shortcut icon",document.getElementsByTagName("head")[0].appendChild(e),e}},{key:"update",value:function(e){this.href=e}},{key:"href",set:function(e){this.node.href=e},get:function(){return this.node.href}},{key:"size",set:function(e){this.size_=e,this.node.sizes=e+"x"+e},get:function(){return this.size_}}])&&i(t.prototype,n),o&&i(t,o),e}();function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.canvas=document.createElement("canvas"),this.ctx_=this.canvas.getContext("2d")}var t,n,i;return t=e,(n=[{key:"node",get:function(){return this.canvas}},{key:"ctx",get:function(){return this.ctx_}},{key:"width",get:function(){return this.node.width},set:function(e){this.node.width=e}},{key:"height",get:function(){return this.node.width},set:function(e){this.node.height=e}}])&&r(t.prototype,n),i&&r(t,i),e}();function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var u=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.video=t,this.mode=n,this.favicon=new o,this.favicon.size=i,this.canvas=new a,this.videoEventListeners=[],this.enable()}var t,n,i;return t=e,(n=[{key:"update",value:function(){var e=this.mode.getFaviconFrame(this.video,this.canvas.node,this.canvas.ctx);this.favicon.update(e)}},{key:"enable",value:function(){this.mode.registerUpdateEvent(this)}},{key:"disable",value:function(){this.unregisterVideoEvents(),this.mode.disable()}},{key:"registerVideoEvent",value:function(e,t){this.videoEventListeners.push({event:e,func:t}),this.video.addEventListener(e,t)}},{key:"unregisterVideoEvents",value:function(){for(var e=0;e<this.videoEventListeners.length;e++){var t=this.videoEventListeners[e];this.video.removeEventListener(t.event,t.func)}}}])&&s(t.prototype,n),i&&s(t,i),e}();function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function f(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var l=function(e){function t(e,n){var i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(i=f(this,v(t).call(this))).respectAspectRatio=e,i.fps=n,i.videoInCanvasSettings={dx:0,dy:0,dWidth:0,dHeight:0},i}var n,i,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),n=t,(i=[{key:"getFaviconFrame",value:function(e,t,n){return this.respectAspectRatio?n.drawImage(e,this.videoInCanvasSettings.dx,this.videoInCanvasSettings.dy,this.videoInCanvasSettings.dWidth,this.videoInCanvasSettings.dHeight):n.drawImage(e,0,0,t.width,t.height),t.toDataURL()}},{key:"getVideoInFaviconFit",value:function(e,t,n){var i=t/(e/n);return{width:n,height:i,offset:(n-i)/2}}},{key:"calculateAndSetVideoInCanvasProfile",value:function(e,t){var n,i=e.videoWidth,o=e.videoHeight;i>o?(n=this.getVideoInFaviconFit(i,o,t),this.videoInCanvasSettings.dx=0,this.videoInCanvasSettings.dy=n.offset,this.videoInCanvasSettings.dWidth=n.width,this.videoInCanvasSettings.dHeight=n.height):(n=this.getVideoInFaviconFit(o,i,t),this.videoInCanvasSettings.dx=n.offset,this.videoInCanvasSettings.dy=0,this.videoInCanvasSettings.dWidth=n.height,this.videoInCanvasSettings.dHeight=n.width)}},{key:"loadedmetadataHandler",value:function(){var e=0,t=0;this.mode.respectAspectRatio?(this.mode.calculateAndSetVideoInCanvasProfile(this.video,this.favicon.size),e=this.favicon.size,t=this.favicon.size):(e=this.video.videoWidth,t=this.video.videoHeight),this.canvas.width=e,this.canvas.height=t}},{key:"registerUpdateEvent",value:function(e){e.registerVideoEvent("loadedmetadata",this.loadedmetadataHandler.bind(e)),this.fps?this.interval=setInterval(e.update.bind(e),1e3/this.fps):e.registerVideoEvent("timeupdate",e.update.bind(e))}},{key:"disable",value:function(){clearTimeout(this.interval)}}])&&d(n.prototype,i),o&&d(n,o),t}((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}));window.Favideo=u,window.FavideoModeVideo=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,