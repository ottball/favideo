!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e){if(!n)var n={map:function(t,e){var n={};return e?t.map((function(t,r){return n.index=r,e.call(n,t)})):t.slice()},naturalOrder:function(t,e){return t<e?-1:t>e?1:0},sum:function(t,e){var n={};return t.reduce(e?function(t,r,i){return n.index=i,t+e.call(n,r)}:function(t,e){return t+e},0)},max:function(t,e){return Math.max.apply(null,e?n.map(t,e):t)}};var r=function(){var t=5,e=8-t,r=1e3,i=.75;function o(e,n,r){return(e<<2*t)+(n<<t)+r}function a(t){var e=[],n=!1;function r(){e.sort(t),n=!0}return{push:function(t){e.push(t),n=!1},peek:function(t){return n||r(),void 0===t&&(t=e.length-1),e[t]},pop:function(){return n||r(),e.pop()},size:function(){return e.length},map:function(t){return e.map(t)},debug:function(){return n||r(),e}}}function s(t,e,n,r,i,o,a){this.r1=t,this.r2=e,this.g1=n,this.g2=r,this.b1=i,this.b2=o,this.histo=a}function u(){this.vboxes=new a((function(t,e){return n.naturalOrder(t.vbox.count()*t.vbox.volume(),e.vbox.count()*e.vbox.volume())}))}function c(t,e){if(e.count()){var r=e.r2-e.r1+1,i=e.g2-e.g1+1,a=e.b2-e.b1+1,s=n.max([r,i,a]);if(1==e.count())return[e.copy()];var u,c,f,h,l=0,p=[],v=[];if(s==r)for(u=e.r1;u<=e.r2;u++){for(h=0,c=e.g1;c<=e.g2;c++)for(f=e.b1;f<=e.b2;f++)h+=t[o(u,c,f)]||0;l+=h,p[u]=l}else if(s==i)for(u=e.g1;u<=e.g2;u++){for(h=0,c=e.r1;c<=e.r2;c++)for(f=e.b1;f<=e.b2;f++)h+=t[o(c,u,f)]||0;l+=h,p[u]=l}else for(u=e.b1;u<=e.b2;u++){for(h=0,c=e.r1;c<=e.r2;c++)for(f=e.g1;f<=e.g2;f++)h+=t[o(c,f,u)]||0;l+=h,p[u]=l}return p.forEach((function(t,e){v[e]=l-t})),d(s==r?"r":s==i?"g":"b")}function d(t){var n,r,i,o,a,s=t+"1",c=t+"2",f=0;for(u=e[s];u<=e[c];u++)if(p[u]>l/2){for(i=e.copy(),o=e.copy(),a=(n=u-e[s])<=(r=e[c]-u)?Math.min(e[c]-1,~~(u+r/2)):Math.max(e[s],~~(u-1-n/2));!p[a];)a++;for(f=v[a];!f&&p[a-1];)f=v[--a];return i[c]=a,o[s]=i[c]+1,[i,o]}}}return s.prototype={volume:function(t){return this._volume&&!t||(this._volume=(this.r2-this.r1+1)*(this.g2-this.g1+1)*(this.b2-this.b1+1)),this._volume},count:function(t){var e=this.histo;if(!this._count_set||t){var n,r,i,a=0;for(n=this.r1;n<=this.r2;n++)for(r=this.g1;r<=this.g2;r++)for(i=this.b1;i<=this.b2;i++)a+=e[o(n,r,i)]||0;this._count=a,this._count_set=!0}return this._count},copy:function(){return new s(this.r1,this.r2,this.g1,this.g2,this.b1,this.b2,this.histo)},avg:function(e){var n=this.histo;if(!this._avg||e){var r,i,a,s,u=0,c=1<<8-t,f=0,h=0,l=0;for(i=this.r1;i<=this.r2;i++)for(a=this.g1;a<=this.g2;a++)for(s=this.b1;s<=this.b2;s++)u+=r=n[o(i,a,s)]||0,f+=r*(i+.5)*c,h+=r*(a+.5)*c,l+=r*(s+.5)*c;this._avg=u?[~~(f/u),~~(h/u),~~(l/u)]:[~~(c*(this.r1+this.r2+1)/2),~~(c*(this.g1+this.g2+1)/2),~~(c*(this.b1+this.b2+1)/2)]}return this._avg},contains:function(t){var n=t[0]>>e;return gval=t[1]>>e,bval=t[2]>>e,n>=this.r1&&n<=this.r2&&gval>=this.g1&&gval<=this.g2&&bval>=this.b1&&bval<=this.b2}},u.prototype={push:function(t){this.vboxes.push({vbox:t,color:t.avg()})},palette:function(){return this.vboxes.map((function(t){return t.color}))},size:function(){return this.vboxes.size()},map:function(t){for(var e=this.vboxes,n=0;n<e.size();n++)if(e.peek(n).vbox.contains(t))return e.peek(n).color;return this.nearest(t)},nearest:function(t){for(var e,n,r,i=this.vboxes,o=0;o<i.size();o++)((n=Math.sqrt(Math.pow(t[0]-i.peek(o).color[0],2)+Math.pow(t[1]-i.peek(o).color[1],2)+Math.pow(t[2]-i.peek(o).color[2],2)))<e||void 0===e)&&(e=n,r=i.peek(o).color);return r},forcebw:function(){var t=this.vboxes;t.sort((function(t,e){return n.naturalOrder(n.sum(t.color),n.sum(e.color))}));var e=t[0].color;e[0]<5&&e[1]<5&&e[2]<5&&(t[0].color=[0,0,0]);var r=t.length-1,i=t[r].color;i[0]>251&&i[1]>251&&i[2]>251&&(t[r].color=[255,255,255])}},{quantize:function(f,h){if(!f.length||h<2||h>256)return!1;var l=function(n){var r,i,a,s,u=new Array(1<<3*t);return n.forEach((function(t){i=t[0]>>e,a=t[1]>>e,s=t[2]>>e,r=o(i,a,s),u[r]=(u[r]||0)+1})),u}(f);l.forEach((function(){0}));var p=function(t,n){var r,i,o,a=1e6,u=0,c=1e6,f=0,h=1e6,l=0;return t.forEach((function(t){r=t[0]>>e,i=t[1]>>e,o=t[2]>>e,r<a?a=r:r>u&&(u=r),i<c?c=i:i>f&&(f=i),o<h?h=o:o>l&&(l=o)})),new s(a,u,c,f,h,l,n)}(f,l),v=new a((function(t,e){return n.naturalOrder(t.count(),e.count())}));function d(t,e){for(var n,i=1,o=0;o<r;)if((n=t.pop()).count()){var a=c(l,n),s=a[0],u=a[1];if(!s)return;if(t.push(s),u&&(t.push(u),i++),i>=e)return;if(o++>r)return}else t.push(n),o++}v.push(p),d(v,i*h);for(var g=new a((function(t,e){return n.naturalOrder(t.count()*t.volume(),e.count()*e.volume())}));v.size();)g.push(v.pop());d(g,h-g.size());for(var b=new u;g.size();)b.push(g.pop());return b}}}();t.exports=r.quantize},function(t,e,n){t.exports={WebVTT:n(2).WebVTT,VTTCue:n(3).VTTCue,VTTRegion:n(5).VTTRegion}},function(t,e){!function(t){function e(t,e){return void 0===e&&(e=1),"rgba("+[parseInt(t.substring(0,2),16),parseInt(t.substring(2,4),16),parseInt(t.substring(4,6),16),e].join(",")+")"}var n=1;function r(t,r,o){switch(o){case"webvtt.font.color":case"webvtt.font.opacity":var a=Services.prefs.getCharPref("webvtt.font.color"),s=Services.prefs.getIntPref("webvtt.font.opacity")/100;i.fontSet=e(a,s);break;case"webvtt.font.scale":n=Services.prefs.getIntPref("webvtt.font.scale")/100;break;case"webvtt.bg.color":case"webvtt.bg.opacity":var u=Services.prefs.getCharPref("webvtt.bg.color"),c=Services.prefs.getIntPref("webvtt.bg.opacity")/100;i.backgroundSet=e(u,c);break;case"webvtt.edge.color":case"webvtt.edge.type":var f=Services.prefs.getIntPref("webvtt.edge.type"),h=Services.prefs.getCharPref("webvtt.edge.color");i.edgeSet=["","0px 0px ","4px 4px 4px ","-2px -2px ","2px 2px "][f]+e(h)}}if("undefined"!=typeof Services){var i={};["webvtt.font.color","webvtt.font.opacity","webvtt.font.scale","webvtt.bg.color","webvtt.bg.opacity","webvtt.edge.color","webvtt.edge.type"].forEach((function(t){r(0,0,t),Services.prefs.addObserver(t,r,!1)}))}var o=Object.create||function(){function t(){}return function(e){if(1!==arguments.length)throw new Error("Object.create shim only accepts one parameter.");return t.prototype=e,new t}}();function a(t,e){this.name="ParsingError",this.code=t.code,this.message=e||t.message}function s(t){function e(t,e,n,r){return 3600*(0|t)+60*(0|e)+(0|n)+(0|r)/1e3}var n=t.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return n?n[3]?e(n[1],n[2],n[3].replace(":",""),n[4]):n[1]>59?e(n[1],n[2],0,n[4]):e(0,n[1],n[2],n[4]):null}function u(){this.values=o(null)}function c(t,e,n,r){var i=r?t.split(r):[t];for(var o in i)if("string"==typeof i[o]){var a=i[o].split(n);if(2===a.length)e(a[0],a[1])}}function f(t,e,n){var r=t;function i(){var e=s(t);if(null===e)throw new a(a.Errors.BadTimeStamp,"Malformed timestamp: "+r);return t=t.replace(/^[^\sa-zA-Z-]+/,""),e}function o(){t=t.replace(/^\s+/,"")}if(o(),e.startTime=i(),o(),"--\x3e"!==t.substr(0,3))throw new a(a.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '--\x3e'): "+r);t=t.substr(3),o(),e.endTime=i(),o(),function(t,e){var r=new u;c(t,(function(t,e){switch(t){case"region":for(var i=n.length-1;i>=0;i--)if(n[i].id===e){r.set(t,n[i].region);break}break;case"vertical":r.alt(t,e,["rl","lr"]);break;case"line":var o=e.split(","),a=o[0];r.integer(t,a),r.percent(t,a)&&r.set("snapToLines",!1),r.alt(t,a,["auto"]),2===o.length&&r.alt("lineAlign",o[1],["start","middle","end"]);break;case"position":o=e.split(","),r.percent(t,o[0]),2===o.length&&r.alt("positionAlign",o[1],["start","middle","end"]);break;case"size":r.percent(t,e);break;case"align":r.alt(t,e,["start","middle","end","left","right"])}}),/:/,/\s/),e.region=r.get("region",null),e.vertical=r.get("vertical",""),e.line=r.get("line","auto"),e.lineAlign=r.get("lineAlign","start"),e.snapToLines=r.get("snapToLines",!0),e.size=r.get("size",100),e.align=r.get("align","middle"),e.position=r.get("position","auto"),e.positionAlign=r.get("positionAlign",{start:"start",left:"start",middle:"middle",end:"end",right:"end"},e.align)}(t,e)}a.prototype=o(Error.prototype),a.prototype.constructor=a,a.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},u.prototype={set:function(t,e){this.get(t)||""===e||(this.values[t]=e)},get:function(t,e,n){return n?this.has(t)?this.values[t]:e[n]:this.has(t)?this.values[t]:e},has:function(t){return t in this.values},alt:function(t,e,n){for(var r=0;r<n.length;++r)if(e===n[r]){this.set(t,e);break}},integer:function(t,e){/^-?\d+$/.test(e)&&this.set(t,parseInt(e,10))},percent:function(t,e){return!!(e.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(e=parseFloat(e))>=0&&e<=100)&&(this.set(t,e),!0)}};var h={"&amp;":"&","&lt;":"<","&gt;":">","&lrm;":"‎","&rlm;":"‏","&nbsp;":" "},l={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},p={v:"title",lang:"lang"},v={rt:"ruby"};function d(t,e){function n(){if(!e)return null;var t,n=e.match(/^([^<]*)(<[^>]+>?)?/);return t=n[1]?n[1]:n[2],e=e.substr(t.length),t}function r(t){return h[t]}function i(t){for(;y=t.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);)t=t.replace(y[0],r);return t}function o(t,e){return!v[e.localName]||v[e.localName]===t.localName}function a(e,n){var r=l[e];if(!r)return null;var i=t.document.createElement(r);i.localName=r;var o=p[e];return o&&n&&(i[o]=n.trim()),i}for(var u,c=t.document.createElement("div"),f=c,d=[];null!==(u=n());)if("<"!==u[0])f.appendChild(t.document.createTextNode(i(u)));else{if("/"===u[1]){d.length&&d[d.length-1]===u.substr(2).replace(">","")&&(d.pop(),f=f.parentNode);continue}var g,b=s(u.substr(1,u.length-2));if(b){g=t.document.createProcessingInstruction("timestamp",b),f.appendChild(g);continue}var y=u.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if(!y)continue;if(!(g=a(y[1],y[3])))continue;if(!o(f,g))continue;y[2]&&(g.className=y[2].substr(1).replace("."," ")),d.push(y[1]),f.appendChild(g),f=g}return c}var g=[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1520,1524],[1544,1544],[1547,1547],[1549,1549],[1563,1563],[1566,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2208,2208],[2210,2220],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67679],[67840,67867],[67872,67897],[67903,67903],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68147],[68160,68167],[68176,68184],[68192,68223],[68352,68405],[68416,68437],[68440,68466],[68472,68479],[68608,68680],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[1114109,1114109]];function b(t){for(var e=0;e<g.length;e++){var n=g[e];if(t>=n[0]&&t<=n[1])return!0}return!1}function y(){}function m(t,e,n){var r="undefined"!=typeof navigator&&/MSIE\s8\.0/.test(navigator.userAgent),o="rgba(255, 255, 255, 1)",a="rgba(0, 0, 0, 0.8)",s="";void 0!==i&&(o=i.fontSet,a=i.backgroundSet,s=i.edgeSet),r&&(o="rgb(255, 255, 255)",a="rgb(0, 0, 0)"),y.call(this),this.cue=e,this.cueDiv=d(t,e.text);var u={color:o,backgroundColor:a,textShadow:s,position:"relative",left:0,right:0,top:0,bottom:0,display:"inline"};r||(u.writingMode=""===e.vertical?"horizontal-tb":"lr"===e.vertical?"vertical-lr":"vertical-rl",u.unicodeBidi="plaintext"),this.applyStyles(u,this.cueDiv),this.div=t.document.createElement("div"),u={textAlign:"middle"===e.align?"center":e.align,font:n.font,whiteSpace:"pre-line",position:"absolute"},r||(u.direction=function(t){var e=[],n="";if(!t||!t.childNodes)return"ltr";function r(t,e){for(var n=e.childNodes.length-1;n>=0;n--)t.push(e.childNodes[n])}function i(t){if(!t||!t.length)return null;var e=t.pop(),n=e.textContent||e.innerText;if(n){var o=n.match(/^.*(\n|\r)/);return o?(t.length=0,o[0]):n}return"ruby"===e.tagName?i(t):e.childNodes?(r(t,e),i(t)):void 0}for(r(e,t);n=i(e);)for(var o=0;o<n.length;o++)if(b(n.charCodeAt(o)))return"rtl";return"ltr"}(this.cueDiv),u.writingMode=""===e.vertical?"horizontal-tb":"lr"===e.vertical?"vertical-lr":"vertical-rl".stylesunicodeBidi="plaintext"),this.applyStyles(u),this.div.appendChild(this.cueDiv);var c=0;switch(e.positionAlign){case"start":c=e.position;break;case"middle":c=e.position-e.size/2;break;case"end":c=e.position-e.size}""===e.vertical?this.applyStyles({left:this.formatStyle(c,"%"),width:this.formatStyle(e.size,"%")}):this.applyStyles({top:this.formatStyle(c,"%"),height:this.formatStyle(e.size,"%")}),this.move=function(t){this.applyStyles({top:this.formatStyle(t.top,"px"),bottom:this.formatStyle(t.bottom,"px"),left:this.formatStyle(t.left,"px"),right:this.formatStyle(t.right,"px"),height:this.formatStyle(t.height,"px"),width:this.formatStyle(t.width,"px")})}}function w(t){var e,n,r,i,o="undefined"!=typeof navigator&&/MSIE\s8\.0/.test(navigator.userAgent);if(t.div){n=t.div.offsetHeight,r=t.div.offsetWidth,i=t.div.offsetTop;var a=(a=t.div.childNodes)&&(a=a[0])&&a.getClientRects&&a.getClientRects();t=t.div.getBoundingClientRect(),e=a?Math.max(a[0]&&a[0].height||0,t.height/a.length):0}this.left=t.left,this.right=t.right,this.top=t.top||i,this.height=t.height||n,this.bottom=t.bottom||i+(t.height||n),this.width=t.width||r,this.lineHeight=void 0!==e?e:t.lineHeight,o&&!this.lineHeight&&(this.lineHeight=13)}function T(t,e,n,r){var i=new w(e),o=e.cue,a=function(t){if("number"==typeof t.line&&(t.snapToLines||t.line>=0&&t.line<=100))return t.line;if(!t.track||!t.track.textTrackList||!t.track.textTrackList.mediaElement)return-1;for(var e=t.track,n=e.textTrackList,r=0,i=0;i<n.length&&n[i]!==e;i++)"showing"===n[i].mode&&r++;return-1*++r}(o),s=[];if(o.snapToLines){var u;switch(o.vertical){case"":s=["+y","-y"],u="height";break;case"rl":s=["+x","-x"],u="width";break;case"lr":s=["-x","+x"],u="width"}var c=i.lineHeight,f=c*Math.round(a),h=n[u]+c,l=s[0];Math.abs(f)>h&&(f=f<0?-1:1,f*=Math.ceil(h/c)*c),a<0&&(f+=""===o.vertical?n.height:n.width,s=s.reverse()),i.move(l,f)}else{var p=i.lineHeight/n.height*100;switch(o.lineAlign){case"middle":a-=p/2;break;case"end":a-=p}switch(o.vertical){case"":e.applyStyles({top:e.formatStyle(a,"%")});break;case"rl":e.applyStyles({left:e.formatStyle(a,"%")});break;case"lr":e.applyStyles({right:e.formatStyle(a,"%")})}s=["+y","-x","+x","-y"],i=new w(e)}var v=function(t,e){for(var i,o=new w(t),a=1,s=0;s<e.length;s++){for(;t.overlapsOppositeAxis(n,e[s])||t.within(n)&&t.overlapsAny(r);)t.move(e[s]);if(t.within(n))return t;var u=t.intersectPercentage(n);a>u&&(i=new w(t),a=u),t=new w(o)}return i||o}(i,s);e.move(v.toCSSCompatValues(n))}function S(){}y.prototype.applyStyles=function(t,e){for(var n in e=e||this.div,t)t.hasOwnProperty(n)&&(e.style[n]=t[n])},y.prototype.formatStyle=function(t,e){return 0===t?0:t+e},m.prototype=o(y.prototype),m.prototype.constructor=m,w.prototype.move=function(t,e){switch(e=void 0!==e?e:this.lineHeight,t){case"+x":this.left+=e,this.right+=e;break;case"-x":this.left-=e,this.right-=e;break;case"+y":this.top+=e,this.bottom+=e;break;case"-y":this.top-=e,this.bottom-=e}},w.prototype.overlaps=function(t){return this.left<t.right&&this.right>t.left&&this.top<t.bottom&&this.bottom>t.top},w.prototype.overlapsAny=function(t){for(var e=0;e<t.length;e++)if(this.overlaps(t[e]))return!0;return!1},w.prototype.within=function(t){return this.top>=t.top&&this.bottom<=t.bottom&&this.left>=t.left&&this.right<=t.right},w.prototype.overlapsOppositeAxis=function(t,e){switch(e){case"+x":return this.left<t.left;case"-x":return this.right>t.right;case"+y":return this.top<t.top;case"-y":return this.bottom>t.bottom}},w.prototype.intersectPercentage=function(t){return Math.max(0,Math.min(this.right,t.right)-Math.max(this.left,t.left))*Math.max(0,Math.min(this.bottom,t.bottom)-Math.max(this.top,t.top))/(this.height*this.width)},w.prototype.toCSSCompatValues=function(t){return{top:this.top-t.top,bottom:t.bottom-this.bottom,left:this.left-t.left,right:t.right-this.right,height:this.height,width:this.width}},w.getSimpleBoxPosition=function(t){var e=t.div?t.div.offsetHeight:t.tagName?t.offsetHeight:0,n=t.div?t.div.offsetWidth:t.tagName?t.offsetWidth:0,r=t.div?t.div.offsetTop:t.tagName?t.offsetTop:0;return{left:(t=t.div?t.div.getBoundingClientRect():t.tagName?t.getBoundingClientRect():t).left,right:t.right,top:t.top||r,height:t.height||e,bottom:t.bottom||r+(t.height||e),width:t.width||n}},S.StringDecoder=function(){return{decode:function(t){if(!t)return"";if("string"!=typeof t)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(t))}}},S.convertCueToDOMTree=function(t,e){return t&&e?d(t,e):null};S.processCues=function(t,e,r){if(!t||!e||!r)return null;for(;r.firstChild;)r.removeChild(r.firstChild);var i=t.document.createElement("div");if(i.style.position="absolute",i.style.left="0",i.style.right="0",i.style.top="0",i.style.bottom="0",i.style.margin="1.5%",r.appendChild(i),function(t){for(var e=0;e<t.length;e++)if(t[e].hasBeenReset||!t[e].displayState)return!0;return!1}(e)){var o=[],a=w.getSimpleBoxPosition(i),s={font:Math.round(.05*a.height*100)/100*n+"px sans-serif"};!function(){for(var n,r,u=0;u<e.length;u++)r=e[u],n=new m(t,r,s),i.appendChild(n.div),T(0,n,a,o),r.displayState=n.div,o.push(w.getSimpleBoxPosition(n))}()}else for(var u=0;u<e.length;u++)i.appendChild(e[u].displayState)},S.Parser=function(t,e){this.window=t,this.state="INITIAL",this.buffer="",this.decoder=e||new TextDecoder("utf8"),this.regionList=[]},S.Parser.prototype={reportOrThrowError:function(t){if(!(t instanceof a))throw t;this.onparsingerror&&this.onparsingerror(t)},parse:function(t){var e=this;function n(){for(var t=e.buffer,n=0;n<t.length&&"\r"!==t[n]&&"\n"!==t[n];)++n;var r=t.substr(0,n);return"\r"===t[n]&&++n,"\n"===t[n]&&++n,e.buffer=t.substr(n),r}function r(t){c(t,(function(t,n){switch(t){case"Region":!function(t){var n=new u;if(c(t,(function(t,e){switch(t){case"id":n.set(t,e);break;case"width":n.percent(t,e);break;case"lines":n.integer(t,e);break;case"regionanchor":case"viewportanchor":var r=e.split(",");if(2!==r.length)break;var i=new u;if(i.percent("x",r[0]),i.percent("y",r[1]),!i.has("x")||!i.has("y"))break;n.set(t+"X",i.get("x")),n.set(t+"Y",i.get("y"));break;case"scroll":n.alt(t,e,["up"])}}),/=/,/\s/),n.has("id")){var r=new e.window.VTTRegion;r.width=n.get("width",100),r.lines=n.get("lines",3),r.regionAnchorX=n.get("regionanchorX",0),r.regionAnchorY=n.get("regionanchorY",100),r.viewportAnchorX=n.get("viewportanchorX",0),r.viewportAnchorY=n.get("viewportanchorY",100),r.scroll=n.get("scroll",""),e.onregion&&e.onregion(r),e.regionList.push({id:n.get("id"),region:r})}}(n)}}),/:/)}t&&(e.buffer+=e.decoder.decode(t,{stream:!0}));try{var i;if("INITIAL"===e.state){if(!/\r\n|\n/.test(e.buffer))return this;var o=(i=n()).match(/^WEBVTT([ \t].*)?$/);if(!o||!o[0])throw new a(a.Errors.BadSignature);e.state="HEADER"}for(var s=!1;e.buffer;){if(!/\r\n|\n/.test(e.buffer))return this;switch(s?s=!1:i=n(),e.state){case"HEADER":/:/.test(i)?r(i):i||(e.state="ID");continue;case"NOTE":i||(e.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(i)){e.state="NOTE";break}if(!i)continue;if(e.cue=new e.window.VTTCue(0,0,""),e.state="CUE",-1===i.indexOf("--\x3e")){e.cue.id=i;continue}case"CUE":try{f(i,e.cue,e.regionList)}catch(t){e.reportOrThrowError(t),e.cue=null,e.state="BADCUE";continue}e.state="CUETEXT";continue;case"CUETEXT":var h=-1!==i.indexOf("--\x3e");if(!i||h&&(s=!0)){e.oncue&&e.oncue(e.cue),e.cue=null,e.state="ID";continue}e.cue.text&&(e.cue.text+="\n"),e.cue.text+=i;continue;case"BADCUE":i||(e.state="ID");continue}}}catch(t){e.reportOrThrowError(t),"CUETEXT"===e.state&&e.cue&&e.oncue&&e.oncue(e.cue),e.cue=null,e.state="INITIAL"===e.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{if(this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new a(a.Errors.BadSignature)}catch(t){this.reportOrThrowError(t)}return this.onflush&&this.onflush(),this}},t.WebVTT=S}(this)},function(t,e,n){var r;t.exports&&(this.VTTCue=this.VTTCue||n(4).VTTCue),(r=this).VTTCue.prototype.toJSON=function(){var t={},e=this;return Object.keys(this).forEach((function(n){"getCueAsHTML"!==n&&"hasBeenReset"!==n&&"displayState"!==n&&(t[n]=e[n])})),t},r.VTTCue.create=function(t){if(!t.hasOwnProperty("startTime")||!t.hasOwnProperty("endTime")||!t.hasOwnProperty("text"))throw new Error("You must at least have start time, end time, and text.");var e=new r.VTTCue(t.startTime,t.endTime,t.text);for(var n in t)e.hasOwnProperty(n)&&(e[n]=t[n]);return e},r.VTTCue.fromJSON=function(t){return this.create(JSON.parse(t))}},function(t,e){!function(t){var e="auto",n={"":!0,lr:!0,rl:!0},r={start:!0,middle:!0,end:!0,left:!0,right:!0};function i(t){return"string"==typeof t&&(!!r[t.toLowerCase()]&&t.toLowerCase())}function o(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)t[r]=n[r]}return t}function a(t,r,a){var s=this,u=/MSIE\s8\.0/.test(navigator.userAgent),c={};u?s=document.createElement("custom"):c.enumerable=!0,s.hasBeenReset=!1;var f="",h=!1,l=t,p=r,v=a,d=null,g="",b=!0,y="auto",m="start",w=50,T="middle",S=50,x="middle";if(Object.defineProperty(s,"id",o({},c,{get:function(){return f},set:function(t){f=""+t}})),Object.defineProperty(s,"pauseOnExit",o({},c,{get:function(){return h},set:function(t){h=!!t}})),Object.defineProperty(s,"startTime",o({},c,{get:function(){return l},set:function(t){if("number"!=typeof t)throw new TypeError("Start time must be set to a number.");l=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"endTime",o({},c,{get:function(){return p},set:function(t){if("number"!=typeof t)throw new TypeError("End time must be set to a number.");p=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"text",o({},c,{get:function(){return v},set:function(t){v=""+t,this.hasBeenReset=!0}})),Object.defineProperty(s,"region",o({},c,{get:function(){return d},set:function(t){d=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"vertical",o({},c,{get:function(){return g},set:function(t){var e=function(t){return"string"==typeof t&&(!!n[t.toLowerCase()]&&t.toLowerCase())}(t);if(!1===e)throw new SyntaxError("An invalid or illegal string was specified.");g=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"snapToLines",o({},c,{get:function(){return b},set:function(t){b=!!t,this.hasBeenReset=!0}})),Object.defineProperty(s,"line",o({},c,{get:function(){return y},set:function(t){if("number"!=typeof t&&t!==e)throw new SyntaxError("An invalid number or illegal string was specified.");y=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"lineAlign",o({},c,{get:function(){return m},set:function(t){var e=i(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");m=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"position",o({},c,{get:function(){return w},set:function(t){if(t<0||t>100)throw new Error("Position must be between 0 and 100.");w=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"positionAlign",o({},c,{get:function(){return T},set:function(t){var e=i(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");T=e,this.hasBeenReset=!0}})),Object.defineProperty(s,"size",o({},c,{get:function(){return S},set:function(t){if(t<0||t>100)throw new Error("Size must be between 0 and 100.");S=t,this.hasBeenReset=!0}})),Object.defineProperty(s,"align",o({},c,{get:function(){return x},set:function(t){var e=i(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");x=e,this.hasBeenReset=!0}})),s.displayState=void 0,u)return s}a.prototype.getCueAsHTML=function(){return WebVTT.convertCueToDOMTree(window,this.text)},t.VTTCue=t.VTTCue||a}(this)},function(t,e,n){var r;t.exports&&(this.VTTRegion=n(6).VTTRegion),(r=this).VTTRegion.create=function(t){var e=new r.VTTRegion;for(var n in t)e.hasOwnProperty(n)&&(e[n]=t[n]);return e},r.VTTRegion.fromJSON=function(t){return this.create(JSON.parse(t))}},function(t,e){!function(t){var e={"":!0,up:!0};function n(t){return"number"==typeof t&&t>=0&&t<=100}t.VTTRegion=t.VTTRegion||function(){var t=100,r=3,i=0,o=100,a=0,s=100,u="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return t},set:function(e){if(!n(e))throw new Error("Width must be between 0 and 100.");t=e}},lines:{enumerable:!0,get:function(){return r},set:function(t){if("number"!=typeof t)throw new TypeError("Lines must be set to a number.");r=t}},regionAnchorY:{enumerable:!0,get:function(){return o},set:function(t){if(!n(t))throw new Error("RegionAnchorX must be between 0 and 100.");o=t}},regionAnchorX:{enumerable:!0,get:function(){return i},set:function(t){if(!n(t))throw new Error("RegionAnchorY must be between 0 and 100.");i=t}},viewportAnchorY:{enumerable:!0,get:function(){return s},set:function(t){if(!n(t))throw new Error("ViewportAnchorY must be between 0 and 100.");s=t}},viewportAnchorX:{enumerable:!0,get:function(){return a},set:function(t){if(!n(t))throw new Error("ViewportAnchorX must be between 0 and 100.");a=t}},scroll:{enumerable:!0,get:function(){return u},set:function(t){var n=function(t){return"string"==typeof t&&(!!e[t.toLowerCase()]&&t.toLowerCase())}(t);if(!1===n)throw new SyntaxError("An invalid or illegal string was specified.");u=n}}})}}(this)},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(e);var i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=this.getExistingFavicon();n?(this.originalHref=n.href,this.node=n):this.node=this.create()}var e,n,i;return e=t,(n=[{key:"getExistingFavicon",value:function(){return document.querySelector('link[rel="shortcut icon"]')}},{key:"create",value:function(){var t=document.createElement("link");return t.type="image/x-icon",t.rel="shortcut icon",document.getElementsByTagName("head")[0].appendChild(t),t}},{key:"update",value:function(t){this.href=t}},{key:"restoreDefault",value:function(){this.originalHref&&this.update(this.originalHref)}},{key:"href",set:function(t){this.node.href=t},get:function(){return this.node.href}},{key:"size",set:function(t){this.size_=t,this.node.sizes=t+"x"+t},get:function(){return this.size_}}])&&r(e.prototype,n),i&&r(e,i),t}();function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.createElement("canvas"),this.ctx_=this.canvas.getContext("2d")}var e,n,r;return e=t,(n=[{key:"node",get:function(){return this.canvas}},{key:"ctx",get:function(){return this.ctx_}},{key:"width",get:function(){return this.node.width},set:function(t){this.node.width=t}},{key:"height",get:function(){return this.node.width},set:function(t){this.node.height=t}}])&&o(e.prototype,n),r&&o(e,r),t}();function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.input=e,this.mode=n,this.favicon=new i,this.favicon.size=r,this.faviconCanvas=new a,this.videoEventListeners=[],this.enable()}var e,n,r;return e=t,(n=[{key:"update",value:function(){var t=this.mode.getFaviconFrame(this.input,this.faviconCanvas.node,this.faviconCanvas.ctx,this.favicon);t&&this.favicon.update(t)}},{key:"enable",value:function(){this.mode.registerUpdateEvent(this)}},{key:"disable",value:function(){this.unregisterVideoEvents(),this.mode.disable()}},{key:"registerVideoEvent",value:function(t,e){this.videoEventListeners.push({event:t,func:e}),this.input.video.addEventListener(t,e)}},{key:"unregisterVideoEvents",value:function(){for(var t=0;t<this.videoEventListeners.length;t++){var e=this.videoEventListeners[t];this.input.video.removeEventListener(e.event,e.func)}}}])&&s(e.prototype,n),r&&s(e,r),t}();function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var f=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.fps=e}var e,n,r;return e=t,(n=[{key:"registerUpdateEvent",value:function(t){t.registerVideoEvent("loadedmetadata",this.loadedmetadataHandler.bind(t)),t.registerVideoEvent("pause",this.restoreOriginalFavicon.bind(t)),t.registerVideoEvent("ended",this.restoreOriginalFavicon.bind(t)),this.fps?this.interval=setInterval(t.update.bind(t),1e3/this.fps):t.registerVideoEvent("timeupdate",t.update.bind(t))}},{key:"restoreOriginalFavicon",value:function(){this.favicon.restoreDefault()}},{key:"loadedmetadataHandler",value:function(){var t=this.favicon.size,e=this.favicon.size;this.faviconCanvas.width=t,this.faviconCanvas.height=e}},{key:"disable",value:function(){clearTimeout(this.interval)}}])&&c(e.prototype,n),r&&c(e,r),t}();function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,e){return!e||"object"!==h(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var g=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=p(this,v(e).call(this,t))).respectAspectRatio=n,r.videoInCanvasSettings={dx:0,dy:0,dWidth:0,dHeight:0},r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}(e,t),n=e,(r=[{key:"getFaviconFrame",value:function(t,e,n){return this.respectAspectRatio?n.drawImage(t.getSource(),this.videoInCanvasSettings.dx,this.videoInCanvasSettings.dy,this.videoInCanvasSettings.dWidth,this.videoInCanvasSettings.dHeight):n.drawImage(t.getSource(),0,0,e.width,e.height),e.toDataURL()}},{key:"getVideoInFaviconFit",value:function(t,e,n){var r=e/(t/n);return{width:n,height:r,offset:(n-r)/2}}},{key:"calculateAndSetVideoInCanvasProfile",value:function(t,e){var n,r=t.videoWidth,i=t.videoHeight;r>i?(n=this.getVideoInFaviconFit(r,i,e),this.videoInCanvasSettings.dx=0,this.videoInCanvasSettings.dy=n.offset,this.videoInCanvasSettings.dWidth=n.width,this.videoInCanvasSettings.dHeight=n.height):(n=this.getVideoInFaviconFit(i,r,e),this.videoInCanvasSettings.dx=n.offset,this.videoInCanvasSettings.dy=0,this.videoInCanvasSettings.dWidth=n.height,this.videoInCanvasSettings.dHeight=n.width)}},{key:"loadedmetadataHandler",value:function(){var t=0,e=0;this.mode.respectAspectRatio?(this.mode.calculateAndSetVideoInCanvasProfile(this.input.video,this.favicon.size),t=this.favicon.size,e=this.favicon.size):(t=this.input.video.videoWidth,e=this.input.video.videoHeight),this.faviconCanvas.width=t,this.faviconCanvas.height=e}}])&&l(n.prototype,r),i&&l(n,i),e}(f);function b(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var y=n(0),m=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,r=[{key:"getAverageColor",value:function(e,n){for(var r=n.getImageData(0,0,e.width,e.height).data,i={r:0,g:0,b:0,a:0},o=r.length/4,a=0;a<r.length;a+=4)i.r=i.r+r[a],i.g=i.g+r[a+1],i.b=i.b+r[a+2],i.a=i.a+r[a+3];var s={r:i.r/o,g:i.g/o,b:i.b/o,a:i.a/o};return t.getRgbaCssString(s)}},{key:"createPixelArray",value:function(t,e){for(var n,r,i,o,a,s=t,u=[],c=0;c<e;c++)r=s[0+(n=4*c)],i=s[n+1],o=s[n+2],(void 0===(a=s[n+3])||a>=125)&&(r>250&&i>250&&o>250||u.push([r,i,o]));return u}},{key:"getDominantColor",value:function(e,n){var r=n.getImageData(0,0,e.width,e.height),i=e.width*e.height,o=t.createPixelArray(r.data,i),a=y(o,4),s=a?a.palette():null;return t.getRgbaCssStringByArray(s[0])}},{key:"getRgbaCssString",value:function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a+")"}},{key:"getRgbaCssStringByArray",value:function(t){return"rgba("+t[0]+","+t[1]+","+t[2]+",255)"}}],(n=null)&&b(e.prototype,n),r&&b(e,r),t}();function w(t){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function T(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function S(t,e){return!e||"object"!==w(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function x(t){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function C(t,e){return(C=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var E=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=S(this,x(e).call(this,t))).colorType=n,r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&C(t,e)}(e,t),n=e,(r=[{key:"getFaviconFrame",value:function(t,e,n,r){var i=document.createElement("canvas");i.width=t.video.videoWidth,i.height=t.video.videoHeight;var o=i.getContext("2d");o.drawImage(t.getSource(),0,0,i.width,i.height);var a=this.getColor(i,o);return n.clearRect(0,0,e.width,e.height),this.drawObject(a,n,r.size),e.toDataURL()}},{key:"getColor",value:function(t,e){switch(this.colorType){case"average":return m.getAverageColor(t,e);case"dominant":return m.getDominantColor(t,e)}}},{key:"drawObject",value:function(t,e,n){this.drawPlayObject(t,e,n)}},{key:"drawPlayObject",value:function(t,e,n){e.fillStyle=t,e.beginPath(),e.moveTo(0,0),e.lineTo(0,n),e.lineTo(n,n/2),e.fill()}}])&&T(n.prototype,r),i&&T(n,i),e}(f);function O(t){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function k(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function P(t,e){return!e||"object"!==O(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function j(t){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function A(t,e){return(A=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var I=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=P(this,j(e).call(this,t))).colorType=n,r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&A(t,e)}(e,t),n=e,(r=[{key:"setFavicon",value:function(t){var e=this,n=document.createElement("img");n.addEventListener("load",function(){var t=document.createElement("canvas");t.width=n.naturalWidth,t.height=n.naturalWidth;var r=t.getContext("2d");r.drawImage(n,0,0),e.faviconCanvasCtx=r,e.faviconCanvas=t}.bind(this)),n.src=t.href}},{key:"getFaviconFrame",value:function(t,e,n,r){this.faviconCanvasCtx||this.setFavicon(r);var i=document.createElement("canvas");i.width=t.video.videoWidth,i.height=t.video.videoHeight;var o=i.getContext("2d");o.drawImage(t.getSource(),0,0,i.width,i.height);var a=this.getColor(i,o);return this.faviconCanvasCtx?(this.faviconCanvasCtx.globalCompositeOperation="source-in",this.faviconCanvasCtx.fillStyle=a,this.faviconCanvasCtx.fillRect(0,0,this.faviconCanvas.width,this.faviconCanvas.height),this.faviconCanvasCtx.fill(),this.faviconCanvas.toDataURL()):null}},{key:"getColor",value:function(t,e){switch(this.colorType){case"average":return m.getAverageColor(t,e);case"dominant":return m.getDominantColor(t,e)}}}])&&k(n.prototype,r),i&&k(n,i),e}(f);function R(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var _=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.video=e}var e,n,r;return e=t,(n=[{key:"getSource",value:function(){return this.video}}])&&R(e.prototype,n),r&&R(e,r),t}();function V(t){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function M(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function B(t,e){return!e||"object"!==V(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function L(t){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function z(t,e){return(z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var D=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=B(this,L(e).call(this,t))).webVTTUrl=n,r.parseWebVTT(n),r}var r,i,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&z(t,e)}(e,t),r=e,(i=[{key:"parseWebVTT",value:function(t){var e=n(1),r=new e.WebVTT.Parser(window,e.WebVTT.StringDecoder());r.oncue=function(t){};var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var t=i.responseText;r.parse(t)}},i.open("GET",t,!0),i.send()}}])&&M(r.prototype,i),o&&M(r,o),e}(_);window.Favideo=u,window.VideoMode=g,window.PlayIconMode=E,window.RecolorMode=I,window.VideoInput=_,window.WebVTTInput=D}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,