!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){if(!n)var n={map:function(t,e){var n={};return e?t.map((function(t,i){return n.index=i,e.call(n,t)})):t.slice()},naturalOrder:function(t,e){return t<e?-1:t>e?1:0},sum:function(t,e){var n={};return t.reduce(e?function(t,i,r){return n.index=r,t+e.call(n,i)}:function(t,e){return t+e},0)},max:function(t,e){return Math.max.apply(null,e?n.map(t,e):t)}};var i=function(){var t=5,e=8-t,i=1e3,r=.75;function o(e,n,i){return(e<<2*t)+(n<<t)+i}function a(t){var e=[],n=!1;function i(){e.sort(t),n=!0}return{push:function(t){e.push(t),n=!1},peek:function(t){return n||i(),void 0===t&&(t=e.length-1),e[t]},pop:function(){return n||i(),e.pop()},size:function(){return e.length},map:function(t){return e.map(t)},debug:function(){return n||i(),e}}}function u(t,e,n,i,r,o,a){this.r1=t,this.r2=e,this.g1=n,this.g2=i,this.b1=r,this.b2=o,this.histo=a}function s(){this.vboxes=new a((function(t,e){return n.naturalOrder(t.vbox.count()*t.vbox.volume(),e.vbox.count()*e.vbox.volume())}))}function c(t,e){if(e.count()){var i=e.r2-e.r1+1,r=e.g2-e.g1+1,a=e.b2-e.b1+1,u=n.max([i,r,a]);if(1==e.count())return[e.copy()];var s,c,f,h,l=0,v=[],d=[];if(u==i)for(s=e.r1;s<=e.r2;s++){for(h=0,c=e.g1;c<=e.g2;c++)for(f=e.b1;f<=e.b2;f++)h+=t[o(s,c,f)]||0;l+=h,v[s]=l}else if(u==r)for(s=e.g1;s<=e.g2;s++){for(h=0,c=e.r1;c<=e.r2;c++)for(f=e.b1;f<=e.b2;f++)h+=t[o(c,s,f)]||0;l+=h,v[s]=l}else for(s=e.b1;s<=e.b2;s++){for(h=0,c=e.r1;c<=e.r2;c++)for(f=e.g1;f<=e.g2;f++)h+=t[o(c,f,s)]||0;l+=h,v[s]=l}return v.forEach((function(t,e){d[e]=l-t})),p(u==i?"r":u==r?"g":"b")}function p(t){var n,i,r,o,a,u=t+"1",c=t+"2",f=0;for(s=e[u];s<=e[c];s++)if(v[s]>l/2){for(r=e.copy(),o=e.copy(),a=(n=s-e[u])<=(i=e[c]-s)?Math.min(e[c]-1,~~(s+i/2)):Math.max(e[u],~~(s-1-n/2));!v[a];)a++;for(f=d[a];!f&&v[a-1];)f=d[--a];return r[c]=a,o[u]=r[c]+1,[r,o]}}}return u.prototype={volume:function(t){return this._volume&&!t||(this._volume=(this.r2-this.r1+1)*(this.g2-this.g1+1)*(this.b2-this.b1+1)),this._volume},count:function(t){var e=this.histo;if(!this._count_set||t){var n,i,r,a=0;for(n=this.r1;n<=this.r2;n++)for(i=this.g1;i<=this.g2;i++)for(r=this.b1;r<=this.b2;r++)a+=e[o(n,i,r)]||0;this._count=a,this._count_set=!0}return this._count},copy:function(){return new u(this.r1,this.r2,this.g1,this.g2,this.b1,this.b2,this.histo)},avg:function(e){var n=this.histo;if(!this._avg||e){var i,r,a,u,s=0,c=1<<8-t,f=0,h=0,l=0;for(r=this.r1;r<=this.r2;r++)for(a=this.g1;a<=this.g2;a++)for(u=this.b1;u<=this.b2;u++)s+=i=n[o(r,a,u)]||0,f+=i*(r+.5)*c,h+=i*(a+.5)*c,l+=i*(u+.5)*c;this._avg=s?[~~(f/s),~~(h/s),~~(l/s)]:[~~(c*(this.r1+this.r2+1)/2),~~(c*(this.g1+this.g2+1)/2),~~(c*(this.b1+this.b2+1)/2)]}return this._avg},contains:function(t){var n=t[0]>>e;return gval=t[1]>>e,bval=t[2]>>e,n>=this.r1&&n<=this.r2&&gval>=this.g1&&gval<=this.g2&&bval>=this.b1&&bval<=this.b2}},s.prototype={push:function(t){this.vboxes.push({vbox:t,color:t.avg()})},palette:function(){return this.vboxes.map((function(t){return t.color}))},size:function(){return this.vboxes.size()},map:function(t){for(var e=this.vboxes,n=0;n<e.size();n++)if(e.peek(n).vbox.contains(t))return e.peek(n).color;return this.nearest(t)},nearest:function(t){for(var e,n,i,r=this.vboxes,o=0;o<r.size();o++)((n=Math.sqrt(Math.pow(t[0]-r.peek(o).color[0],2)+Math.pow(t[1]-r.peek(o).color[1],2)+Math.pow(t[2]-r.peek(o).color[2],2)))<e||void 0===e)&&(e=n,i=r.peek(o).color);return i},forcebw:function(){var t=this.vboxes;t.sort((function(t,e){return n.naturalOrder(n.sum(t.color),n.sum(e.color))}));var e=t[0].color;e[0]<5&&e[1]<5&&e[2]<5&&(t[0].color=[0,0,0]);var i=t.length-1,r=t[i].color;r[0]>251&&r[1]>251&&r[2]>251&&(t[i].color=[255,255,255])}},{quantize:function(f,h){if(!f.length||h<2||h>256)return!1;var l=function(n){var i,r,a,u,s=new Array(1<<3*t);return n.forEach((function(t){r=t[0]>>e,a=t[1]>>e,u=t[2]>>e,i=o(r,a,u),s[i]=(s[i]||0)+1})),s}(f);l.forEach((function(){0}));var v=function(t,n){var i,r,o,a=1e6,s=0,c=1e6,f=0,h=1e6,l=0;return t.forEach((function(t){i=t[0]>>e,r=t[1]>>e,o=t[2]>>e,i<a?a=i:i>s&&(s=i),r<c?c=r:r>f&&(f=r),o<h?h=o:o>l&&(l=o)})),new u(a,s,c,f,h,l,n)}(f,l),d=new a((function(t,e){return n.naturalOrder(t.count(),e.count())}));function p(t,e){for(var n,r=1,o=0;o<i;)if((n=t.pop()).count()){var a=c(l,n),u=a[0],s=a[1];if(!u)return;if(t.push(u),s&&(t.push(s),r++),r>=e)return;if(o++>i)return}else t.push(n),o++}d.push(v),p(d,r*h);for(var g=new a((function(t,e){return n.naturalOrder(t.count()*t.volume(),e.count()*e.volume())}));d.size();)g.push(d.pop());p(g,h-g.size());for(var b=new s;g.size();)b.push(g.pop());return b}}}();t.exports=i.quantize},function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}n.r(e);var r=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=this.getExistingFavicon();n?(this.originalHref=n.href,this.node=n):this.node=this.create()}var e,n,r;return e=t,(n=[{key:"getExistingFavicon",value:function(){return document.querySelector('link[rel="shortcut icon"]')}},{key:"create",value:function(){var t=document.createElement("link");return t.type="image/x-icon",t.rel="shortcut icon",document.getElementsByTagName("head")[0].appendChild(t),t}},{key:"update",value:function(t){this.href=t}},{key:"restoreDefault",value:function(){this.originalHref&&this.update(this.originalHref)}},{key:"href",set:function(t){this.node.href=t},get:function(){return this.node.href}},{key:"size",set:function(t){this.size_=t,this.node.sizes=t+"x"+t},get:function(){return this.size_}}])&&i(e.prototype,n),r&&i(e,r),t}();function o(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.createElement("canvas"),this.ctx_=this.canvas.getContext("2d")}var e,n,i;return e=t,(n=[{key:"node",get:function(){return this.canvas}},{key:"ctx",get:function(){return this.ctx_}},{key:"width",get:function(){return this.node.width},set:function(t){this.node.width=t}},{key:"height",get:function(){return this.node.width},set:function(t){this.node.height=t}}])&&o(e.prototype,n),i&&o(e,i),t}();function u(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var s=function(){function t(e,n,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.input=e,this.mode=n,this.favicon=new r,this.favicon.size=i,this.faviconCanvas=new a,this.videoEventListeners=[],this.enable()}var e,n,i;return e=t,(n=[{key:"update",value:function(){var t=this.mode.getFaviconFrame(this.input,this.faviconCanvas.node,this.faviconCanvas.ctx,this.favicon);t&&this.favicon.update(t)}},{key:"enable",value:function(){this.mode.registerUpdateEvent(this)}},{key:"disable",value:function(){this.unregisterVideoEvents(),this.mode.disable()}},{key:"registerVideoEvent",value:function(t,e){this.videoEventListeners.push({event:t,func:e}),this.input.video.addEventListener(t,e)}},{key:"unregisterVideoEvents",value:function(){for(var t=0;t<this.videoEventListeners.length;t++){var e=this.videoEventListeners[t];this.input.video.removeEventListener(e.event,e.func)}}}])&&u(e.prototype,n),i&&u(e,i),t}();var c=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)};function f(t){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function l(t,e){return!e||"object"!==f(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function e(t,n){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(i=l(this,v(e).call(this))).respectAspectRatio=t,i.fps=n,i.videoInCanvasSettings={dx:0,dy:0,dWidth:0,dHeight:0},i}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}(e,t),n=e,(i=[{key:"getFaviconFrame",value:function(t,e,n){return this.respectAspectRatio?n.drawImage(t.getSource(),this.videoInCanvasSettings.dx,this.videoInCanvasSettings.dy,this.videoInCanvasSettings.dWidth,this.videoInCanvasSettings.dHeight):n.drawImage(t.getSource(),0,0,e.width,e.height),e.toDataURL()}},{key:"getVideoInFaviconFit",value:function(t,e,n){var i=e/(t/n);return{width:n,height:i,offset:(n-i)/2}}},{key:"calculateAndSetVideoInCanvasProfile",value:function(t,e){var n,i=t.videoWidth,r=t.videoHeight;i>r?(n=this.getVideoInFaviconFit(i,r,e),this.videoInCanvasSettings.dx=0,this.videoInCanvasSettings.dy=n.offset,this.videoInCanvasSettings.dWidth=n.width,this.videoInCanvasSettings.dHeight=n.height):(n=this.getVideoInFaviconFit(r,i,e),this.videoInCanvasSettings.dx=n.offset,this.videoInCanvasSettings.dy=0,this.videoInCanvasSettings.dWidth=n.height,this.videoInCanvasSettings.dHeight=n.width)}},{key:"loadedmetadataHandler",value:function(){var t=0,e=0;this.mode.respectAspectRatio?(this.mode.calculateAndSetVideoInCanvasProfile(this.input.video,this.favicon.size),t=this.favicon.size,e=this.favicon.size):(t=this.input.video.videoWidth,e=this.input.video.videoHeight),this.faviconCanvas.width=t,this.faviconCanvas.height=e}},{key:"registerUpdateEvent",value:function(t){t.registerVideoEvent("loadedmetadata",this.loadedmetadataHandler.bind(t)),this.fps?this.interval=setInterval(t.update.bind(t),1e3/this.fps):t.registerVideoEvent("timeupdate",t.update.bind(t))}},{key:"disable",value:function(){clearTimeout(this.interval)}}])&&h(n.prototype,i),r&&h(n,r),e}(c);function g(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var b=n(0),y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"getAverageColor",value:function(e,n){for(var i=n.getImageData(0,0,e.width,e.height).data,r={r:0,g:0,b:0,a:0},o=i.length/4,a=0;a<i.length;a+=4)r.r=r.r+i[a],r.g=r.g+i[a+1],r.b=r.b+i[a+2],r.a=r.a+i[a+3];var u={r:r.r/o,g:r.g/o,b:r.b/o,a:r.a/o};return t.getRgbaCssString(u)}},{key:"createPixelArray",value:function(t,e){for(var n,i,r,o,a,u=t,s=[],c=0;c<e;c++)i=u[0+(n=4*c)],r=u[n+1],o=u[n+2],(void 0===(a=u[n+3])||a>=125)&&(i>250&&r>250&&o>250||s.push([i,r,o]));return s}},{key:"getDominantColor",value:function(e,n){var i=n.getImageData(0,0,e.width,e.height),r=e.width*e.height,o=t.createPixelArray(i.data,r),a=b(o,4),u=a?a.palette():null;return t.getRgbaCssStringByArray(u[0])}},{key:"getRgbaCssString",value:function(t){return"rgba("+t.r+","+t.g+","+t.b+","+t.a+")"}},{key:"getRgbaCssStringByArray",value:function(t){return"rgba("+t[0]+","+t[1]+","+t[2]+",255)"}}],(n=null)&&g(e.prototype,n),i&&g(e,i),t}();function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function w(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function C(t,e){return!e||"object"!==m(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function k(t){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function O(t,e){return(O=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var x=function(t){function e(t,n){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(i=C(this,k(e).call(this))).fps=t,i.colorType=n,i}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&O(t,e)}(e,t),n=e,(i=[{key:"getFaviconFrame",value:function(t,e,n,i){var r=document.createElement("canvas");r.width=t.video.videoWidth,r.height=t.video.videoHeight;var o=r.getContext("2d");o.drawImage(t.getSource(),0,0,r.width,r.height);var a=this.getColor(r,o);return n.clearRect(0,0,e.width,e.height),this.drawObject(a,n,i.size),e.toDataURL()}},{key:"getColor",value:function(t,e){switch(this.colorType){case"average":return y.getAverageColor(t,e);case"dominant":return y.getDominantColor(t,e)}}},{key:"drawObject",value:function(t,e,n){this.drawPlayObject(t,e,n)}},{key:"drawPlayObject",value:function(t,e,n){e.fillStyle=t,e.beginPath(),e.moveTo(0,0),e.lineTo(0,n),e.lineTo(n,n/2),e.fill()}},{key:"loadedmetadataHandler",value:function(){var t=this.favicon.size,e=this.favicon.size;this.faviconCanvas.width=t,this.faviconCanvas.height=e}},{key:"restoreOriginalFavicon",value:function(){this.favicon.restoreDefault()}},{key:"registerUpdateEvent",value:function(t){t.registerVideoEvent("loadedmetadata",this.loadedmetadataHandler.bind(t)),t.registerVideoEvent("pause",this.restoreOriginalFavicon.bind(t)),t.registerVideoEvent("ended",this.restoreOriginalFavicon.bind(t)),this.fps?this.interval=setInterval(t.update.bind(t),1e3/this.fps):t.registerVideoEvent("timeupdate",t.update.bind(t))}},{key:"disable",value:function(){clearTimeout(this.interval)}}])&&w(n.prototype,i),r&&w(n,r),e}(c);function E(t){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function S(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _(t,e){return!e||"object"!==E(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function j(t){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function P(t,e){return(P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var I=function(t){function e(t,n){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(i=_(this,j(e).call(this))).fps=t,i.colorType=n,i}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&P(t,e)}(e,t),n=e,(i=[{key:"setFavicon",value:function(t){var e=this,n=document.createElement("img");n.addEventListener("load",function(){var t=document.createElement("canvas");t.width=n.naturalWidth,t.height=n.naturalWidth;var i=t.getContext("2d");i.drawImage(n,0,0),e.faviconCanvasCtx=i,e.faviconCanvas=t}.bind(this)),n.src=t.href}},{key:"getFaviconFrame",value:function(t,e,n,i){this.faviconCanvasCtx||this.setFavicon(i);var r=document.createElement("canvas");r.width=t.video.videoWidth,r.height=t.video.videoHeight;var o=r.getContext("2d");o.drawImage(t.getSource(),0,0,r.width,r.height);var a=this.getColor(r,o);return this.faviconCanvasCtx?(this.faviconCanvasCtx.globalCompositeOperation="source-in",this.faviconCanvasCtx.fillStyle=a,this.faviconCanvasCtx.fillRect(0,0,this.faviconCanvas.width,this.faviconCanvas.height),this.faviconCanvasCtx.fill(),this.faviconCanvas.toDataURL()):null}},{key:"getColor",value:function(t,e){switch(this.colorType){case"average":return y.getAverageColor(t,e);case"dominant":return y.getDominantColor(t,e)}}},{key:"loadedmetadataHandler",value:function(){var t=this.favicon.size,e=this.favicon.size;this.faviconCanvas.width=t,this.faviconCanvas.height=e}},{key:"restoreOriginalFavicon",value:function(){this.favicon.restoreDefault()}},{key:"registerUpdateEvent",value:function(t){t.registerVideoEvent("loadedmetadata",this.loadedmetadataHandler.bind(t)),t.registerVideoEvent("pause",this.restoreOriginalFavicon.bind(t)),t.registerVideoEvent("ended",this.restoreOriginalFavicon.bind(t)),this.fps?this.interval=setInterval(t.update.bind(t),1e3/this.fps):t.registerVideoEvent("timeupdate",t.update.bind(t))}},{key:"disable",value:function(){clearTimeout(this.interval)}}])&&S(n.prototype,i),r&&S(n,r),e}(c);function F(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var T=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.video=e}var e,n,i;return e=t,(n=[{key:"getSource",value:function(){return this.video}}])&&F(e.prototype,n),i&&F(e,i),t}();window.Favideo=s,window.VideoMode=p,window.PlayIconMode=x,window.RecolorMode=I,window.VideoInput=T}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,